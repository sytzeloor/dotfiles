{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":0,"width":2560,"height":1440},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/sytze/Sites/Videofy/API2","buffers":[{"text":"Api.controller :direct_publishing_settings, :provides => [:json, :marshal, :oj] do\n  \n  get '/validations' do\n    resultify :data => VFM::Validate::output_rules(DirectPublishingSetting::RULES)\n  end\n  \n  # Use /users/:user_id/platforms instead. This is old for android\n  get '/platforms/:country' do\n    resultify :data => DirectPublishingSetting.platforms.reject { |platform,data| platform == :blogg_no }\n  end\n  \n  # Use /users/:user_id/platforms instead. This is old for android\n  get '/platforms' do\n    resultify :data => DirectPublishingSetting.platforms.reject { |platform,data| platform == :blogg_no }\n  end\n  \n  get '/:direct_publishing_setting_id' do\n    setting = DirectPublishingSetting[params[:direct_publishing_setting_id]]\n    return not_found unless setting\n    \n    resultify :data => setting.secured_output\n  end\n  \n  put '/:direct_publishing_setting_id' do\n    setting = DirectPublishingSetting[params[:direct_publishing_setting_id]]\n    return not_found unless setting\n    \n    if false == setting.update_fields_from_params(params, :username, :password, :url, :width, :facebook_access_token, :selected_blog, :oauth_response)\n      resultify_errors setting.errors\n    else\n      resultify :status => \"SUCCESS\", :data => setting.secured_output\n    end\n  end\n  \n  delete '/:direct_publishing_setting_id' do\n    setting = DirectPublishingSetting[params[:direct_publishing_setting_id]]\n    return not_found unless setting\n\n    if setting.destroy\n      resultify :status => \"SUCCESS\"\n    else\n      resultify :status => \"FAILED\"\n    end\n  end\n  \nend","markers":{"markers":{"2":{"id":2,"range":[[16,9],[16,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"3":{"id":3,"range":[[17,46],[17,74]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"4":{"id":4,"range":[[23,9],[23,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"5":{"id":5,"range":[[24,46],[24,74]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"6":{"id":6,"range":[[34,12],[34,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"7":{"id":7,"range":[[35,46],[35,74]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"9":{"id":9,"range":[[28,37],[28,37]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":671,"goalBufferRange":null,"preserveFolds":true,"autoscroll":false},"deserializer":"Marker"},"10":{"id":10,"range":[[27,24],[27,49]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"11":{"id":11,"range":[[45,3],[45,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"12":{"id":12,"range":[[27,24],[27,49]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sytze/Sites/Videofy/API2/app/controllers/direct_publishing_settings.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"abc9af00d338aa5e2f57139a672cbc3bc27f4328","deserializer":"TextBuffer"},{"text":"require 'openssl'\nrequire 'digest/sha1'\nrequire PADRINO_ROOT + '/app/models/vfm_oauth_1'\nrequire PADRINO_ROOT + '/app/models/vfm_oauth_2'\n\nclass DirectPublishingSetting < Sequel::Model(:direct_publishing_settings)\n  include VFM::Validate\n  include VFM::SequelMonkeypatch\n  plugin :validation_helpers\n  one_to_one  :blog, :primary_key => :blog_id, :key => :blog_id\n  one_to_many :direct_publishing_jobs, :key => :direct_publishing_settings_id\n\n  # Tells Sequel to attempt to typecast values, but to silently ignore any errors raised.\n  # Validations will handle that instead.\n  self.raise_on_typecast_failure = false\n\n  attr_accessor :enable_xmlrpc, :oauth_response\n\n  FAILURE_CODES = {\n    'SITE_UNREACHABLE'                        => \"Something tells us your website doesn't exist. Did you spell it right?\",\n    'XML_RPC_DISABLED'                        => \"You need to enable a feature called XML-RPC to connect. Do you want us to activate it for you?\",\n    'SITE_NO_SUCH_USER'                       => \"The username/email you provided is incorrect.\",\n    'SITE_WRONG_PASSWORD'                     => \"The password you provided is incorrect.\",\n    'SITE_WRONG_USER_PASSWORD'                => \"The username/email you provided is incorrect.\",\n    'SITE_REPORTS_BLOG_NOT_FOUND'             => \"We couldn't find your blog. Perhaps you spelt it wrong, please try again.\",\n    'SITE_INTERNAL_ERROR'                     => \"Something went wrong on the site we tried to connect to. Please try again.\",\n    'PUBLISHER_UNHANDLED_ERROR'               => \"Something went wrong. Please contact support@videofy.me for help.\",\n    'PUBLISHER_SITE_BAD_RESPONSE'             => \"The website doesn't match with the blog platform you've chosen.\",\n    'PUBLISHER_SITE_PLATFORM_VERSION_TOO_OLD' => \"Your blog has passed its 'best before date' and is not supported by VideofyMe. Please upgrade and try again!\",\n    'SITE_USER_INSUFFICIENT_PRIVILEGES'       => \"Do you have more than one blog under the same account? Log in as admin and configure the settings on the specific blog you want to publish your videos to.\",\n    'URL_INVALID'                             => \"The url you have entered is invalid.\",\n    'SITE_TEMPORARY_ERROR'                    => \"Something went wrong this time, but take a breather and try again in a couple of minutes!\",\n    'SITE_BAD_CONTENT_URL'                    => \"Something is wrong with this video. Please send it to support@videofy.me and we will tell you what's up!\",\n    'SITE_PUBLISHER_INSUFFICIENT_PRIVILEGES'  => \"We don't have permission to post videos to the URL you have indicated. Are you sure you have set it up correctly?\",\n    'WP_ADMIN_INSUFFICIENT_PRIVILEGES'        => \"Is your blog connected to a blog network? Contact an admin user who can configure the settings and make sharing possible.\",\n    'XML_RPC_LOGIN_ERROR'                     => \"Something made it impossible to connect to your website using XML-RPC, check so that you have permissions to use XML-RPC and if you can't solve it email us at support@videofy.me for more help.\",\n    'NO_BLOGS_ERROR'                          => 'Your user doesn\\'t have any pages to publish to'\n  }\n\n  PLATFORMS = {\n    :wordpress_org => {\n      :title        => \"Wordpress\",\n      :connection_type => \"USERNAME_PASSWORD\",\n      :oauth_authorize_url => \"\",\n      :url_needed   => true,\n      :customizable_width => true,\n      :username_alias => \"Username\",\n      :position => 6,\n      :icons => {\n        :'41x38' => \"http://www.videofy.me/embed/icons/wordpress_org.png\",\n        :'64x64' => \"http://www.videofy.me/embed/icons/wordpress_org_64x64.png\"\n      }\n    },\n    :blogspot_com => {\n      :title        => \"Blogger.com\",\n      :connection_type => \"USERNAME_PASSWORD\",\n      :oauth_authorize_url => \"\",\n      :url_needed   => false,\n      :customizable_width => true,\n      :username_alias => \"E-mail\",\n      :position => 7,\n      :icons => {\n        :'41x38' => \"http://www.videofy.me/embed/icons/blogspot_com.png\",\n        :'64x64' => \"http://www.videofy.me/embed/icons/blogspot_com_64x64.png\"\n      }\n    },\n    :youtube => {\n      :title        => \"YouTube\",\n      :url_needed   => false,\n      :connection_type => \"OAUTH\",\n      :customizable_width => false,\n      :username_alias => \"E-mail\",\n      :position => 4,\n      :icons => {\n        :'41x38' => \"http://www.videofy.me/embed/icons/youtube.png\",\n        :'64x64' => \"http://www.videofy.me/embed/icons/youtube_64x64.png\"\n      }\n    },\n    :blogg_no => {\n      :title        => \"Blogg.no\",\n      :url_needed   => false,\n      :connection_type => \"OAUTH\",\n      :customizable_width => true,\n      :username_alias => \"E-mail\",\n      :icons => {\n        :'41x38' => \"http://www.videofy.me/embed/icons/blogg_no.png\",\n        :'64x64' => \"http://www.videofy.me/embed/icons/blogg_no_64x64.png\"\n      }\n    },\n    :tumblr_com => {\n      :title => \"Tumblr.com\",\n      :connection_type => \"OAUTH\",\n      :oauth_authorize_url => \"\",\n      :url_needed   => false,\n      :customizable_width => true,\n      :username_alias => \"E-mail\",\n      :position => 5,\n      :icons => {\n        :'41x38' => \"http://www.videofy.me/embed/icons/tumblr_com.png\",\n        :'64x64' => \"http://www.videofy.me/embed/icons/tumblr_com_64x64.png\"\n      }\n    },\n    :drupal => {\n      :title => \"Drupal\",\n      :url_needed   => true,\n      :customizable_width => true,\n      :username_alias => \"Username\",\n      :connection_type => \"USERNAME_PASSWORD\",\n      :oauth_authorize_url => \"\",\n      :icons => {\n        :'41x38' => \"http://www.videofy.me/embed/icons/drupal.png\",\n        :'64x64' => \"http://www.videofy.me/embed/icons/drupal_64x64.png\"\n      }\n    },\n    :nattstad_se => {\n      :title => \"Nattstad.se\",\n      :country => \"se\",\n      :customizable_width => true,\n      :url_needed   => false,\n      :username_alias => \"Username\",\n      :connection_type => \"USERNAME_PASSWORD\",\n      :oauth_authorize_url => \"\",\n      :icons => {\n        :'41x38' => \"http://www.videofy.me/embed/icons/nattstad_se.png\",\n        :'64x64' => \"http://www.videofy.me/embed/icons/nattstad_se_64x64.png\"\n      }\n    },\n    :blogg_se => {\n      :title        => \"Blogg.se\",\n      :country => \"se\",\n      :customizable_width => true,\n      :url_needed   => false,\n      :username_alias => \"E-mail\",\n      :connection_type => \"USERNAME_PASSWORD\",\n      :oauth_authorize_url => \"\",\n      :icons => {\n        :'41x38' => \"http://www.videofy.me/embed/icons/blogg_se.png\",\n        :'64x64' => \"http://www.videofy.me/embed/icons/blogg_se_64x64.png\"\n      }\n    },\n    :devote_se => {\n      :title        => \"Devote.se\",\n      :country => \"se\",\n      :url_needed   => false,\n      :customizable_width => true,\n      :username_alias => \"Username\",\n      :connection_type => \"USERNAME_PASSWORD\",\n      :oauth_authorize_url => \"\",\n      :icons => {\n        :'41x38' => \"http://www.videofy.me/embed/icons/devote_se.png\",\n        :'64x64' => \"http://www.videofy.me/embed/icons/devote_se_64x64.png\"\n      }\n    },\n    :myshowroom_se => {\n      :title => \"MyShowroom.se\",\n      :country => \"se\",\n      :url_needed   => false,\n      :customizable_width => true,\n      :username_alias => \"Username\",\n      :connection_type => \"USERNAME_PASSWORD\",\n      :oauth_authorize_url => \"\",\n      :icons => {\n        :'41x38' => \"http://www.videofy.me/embed/icons/myshowroom_se.png\",\n        :'64x64' => \"http://www.videofy.me/embed/icons/myshowroom_se_64x64.png\"\n      }\n    },\n    :blogg_by => {\n      :title => \"Blogg.by\",\n      :country => \"se\",\n      :url_needed   => false,\n      :customizable_width => true,\n      :username_alias => \"Username\",\n      :connection_type => \"USERNAME_PASSWORD\",\n      :oauth_authorize_url => \"\",\n      :icons => {\n        :'41x38' => \"http://www.videofy.me/embed/icons/blogg_by.png\",\n        :'64x64' => \"http://www.videofy.me/embed/icons/blogg_by_64x64.png\"\n      }\n    },\n    :spotlife_se => {\n      :title => \"Spotlife.se\",\n      :country => \"se\",\n      :url_needed   => false,\n      :customizable_width => true,\n      :username_alias => \"Username\",\n      :connection_type => \"USERNAME_PASSWORD\",\n      :oauth_authorize_url => \"\",\n      :icons => {\n        :'41x38' => \"http://www.videofy.me/embed/icons/spotlife_se.png\",\n        :'64x64' => \"http://www.videofy.me/embed/icons/spotlife_se_64x64.png\"\n      }\n    },\n    :finest_se => {\n      :title => \"Finest.se\",\n      :country => \"se\",\n      :customizable_width => true,\n      :url_needed   => false,\n      :username_alias => \"Username\",\n      :connection_type => \"USERNAME_PASSWORD\",\n      :oauth_authorize_url => \"\",\n      :icons => {\n        :'41x38' => \"http://www.videofy.me/embed/icons/finest_se.png\",\n        :'64x64' => \"http://www.videofy.me/embed/icons/finest_se_64x64.png\"\n      }\n    }\n  }\n\n  NON_BLOG_PLATFORMS = {\n    :facebook => {\n      :title        => \"Facebook\",\n      :country => nil,\n      :url_needed => false,\n      :username_alias => \"Token\",\n      :connection_type => \"OAUTH\",\n      :oauth_authorize_url => nil,\n      :position => 2,\n      :icons => {\n        :'41x38' => \"http://www.videofy.me/embed/icons/facebook.png\",\n        :'64x64' => \"http://www.videofy.me/embed/icons/facebook_64x64.png\"\n      }\n    },\n    :twitter => {\n      :title        => \"Twitter\",\n      :country => nil,\n      :url_needed => false,\n      :username_alias => \"Token\",\n      :connection_type => \"OAUTH\",\n      :oauth_authorize_url => nil,\n      :position => 1,\n      :icons => {\n        :'41x38' => \"http://www.videofy.me/embed/icons/twitter.png\",\n        :'64x64' => \"http://www.videofy.me/embed/icons/twitter_64x64.png\"\n      }\n    },\n    :facebook_fanpage => {\n      :title        => \"Facebook Fanpage\",\n      :country => nil,\n      :url_needed => false,\n      :username_alias => \"Token\",\n      :connection_type => \"OAUTH\",\n      :oauth_authorize_url => nil,\n      :position => 3,\n      :icons => {\n        :'41x38' => \"http://www.videofy.me/embed/icons/facebook.png\",\n        :'64x64' => \"http://www.videofy.me/embed/icons/facebook_64x64.png\"\n      }\n    }\n  }\n\n  RULES = {\n    :username => {\n      :presence   => conditional_validation { ![\"facebook_fanpage\"].include?(@platform) }\n    },\n    :password => {\n      :presence   => conditional_validation { ![\"facebook\",\"facebook_fanpage\",\"blogspot_com\", \"youtube\",\"blogg_no\"].include?(@platform) }\n    },\n    :platform => {\n      :presence => true,\n      :includes => PLATFORMS.keys.map { |platform| platform.to_s } << \"twitter\" << \"facebook\" << \"facebook_fanpage\"\n    },\n    :blog_id => {\n      :presence => true\n    },\n    :width => {\n      :type => Fixnum\n    },\n    :url => {\n      :is_url   =>  true,\n      :presence => conditional_validation { @platform.present? && DirectPublishingSetting.platforms_that_requires_url.include?(@platform.to_sym) }\n    }\n  }\n\n  def failure_message\n    FAILURE_CODES[ self.failure_code ]\n  end\n\n  def before_create\n    # Delete users other connections to this platform to guarantee uniqness\n    self.class.dataset.filter(:platform => self.platform, :confirmed => [\"PENDING\", \"YES\"], :blog_id => self.blog_id).delete\n\n    super\n  end\n\n  def before_save\n    if [\"twitter\",\"facebook\"].include? self.platform\n      self.confirmed = \"YES\"\n    else\n      self.confirmed = \"PENDING\" if @facebook_access_token\n      self.confirmed = \"PENDING\" if changed_columns.any? { |c| [:username, :password, :url].include? c }\n    end\n\n    self.width = 480 unless self.width.present?\n\n    super\n  end\n\n  def after_save\n    super\n\n    self.blog.user.create_or_update_facebook_access_token :access_token => @facebook_access_token if @facebook_access_token\n\n    self.update_auth_service if ['facebook', 'twitter'].include?(self.platform) && (@plain_username || @plain_password)\n    DirectPublishingJob.create(:direct_publishing_settings_id => self.direct_publishing_settings_id, :enable_xmlrpc => self.enable_xmlrpc) if self.confirmed == \"PENDING\"\n  end\n\n  def users_auth_service\n    @auth_service ||= (AuthService[self.blog.user_id] || AuthService.new(:user_id => self.blog.user_id))\n  end\n\n  def update_auth_service\n    auth_service = self.users_auth_service\n\n    auth_service.facebook_id = @plain_username if self.platform == \"facebook\"\n    if self.platform == \"twitter\"\n      auth_service.twitter_id = self.twitter_id_from_username\n      auth_service.twitter_token = @plain_username\n      auth_service.twitter_secret = @plain_password\n    end\n\n    auth_service.save\n  end\n\n  def twitter_id_from_username\n    @plain_username ? @plain_username.split(\"-\").first : nil\n  end\n\n  def blogger\n    Blogger.join_table(:inner, :blogs, :blogs__user_id => :bloggers__user_id).join_table(:inner, :direct_publishing_settings, :direct_publishing_settings__blog_id => :blogs__blog_id).where(:blogs__blog_id => self.blog_id).first\n  end\n\n  # Sets the url with http:// prepended if it is missing\n  #\n  # Examples\n  #\n  #   setting.url = \"foobar\"\n  #   # => \"http://foobar\"\n  #\n  # Returns super calls response\n  def url=(url)\n    if url.present?\n      uri = URI.parse url\n      uri = URI.parse(\"http://#{url}\") unless uri.host\n      url = uri.to_s\n    end\n\n    super\n  end\n\n  def oauth_response=(val)\n    self.oauth = 1\n\n    case self.platform\n    when \"twitter\":\n      token = VFM::TwitterOAuth.get_access_token val\n      self.username = token.token\n      self.password = token.secret\n\n    when \"facebook\", \"facebook_fanpage\":\n      token = VFM::FacebookOAuth.get_access_token val\n      self.username = Facebook.fb_user_by_access_token(token)['id']\n      self.facebook_access_token = token\n\n    when \"tumblr_com\":\n      token = VFM::TumblrOAuth.get_access_token val\n      self.username = token.token\n      self.password = token.secret\n\n    when \"blogspot_com\", \"youtube\":\n      token = VFM::GoogleOAuth.get_access_token val\n      self.username = token['access_token']\n      self.password = token['refresh_token']\n      \n    when \"blogg_no\":\n      token = VFM::BloggNoOAuth.get_access_token val\n      self.username = token['access_token']\n      \n    end\n  end\n\n  # Sets the username using cipher to encrypt\n  #\n  # Examples\n  #\n  #   setting.username = \"foobar\"\n  #   # => true\n  #\n  # Returns true/false\n  def username=(val)\n    return false if val.blank?\n\n    @plain_username = val\n\n    c = OpenSSL::Cipher::Cipher.new(\"des3\")\n    c.encrypt\n    c.key = key = Digest::SHA1.hexdigest(SETTINGS[:direct_publishing_secret]).unpack('a2'*32).map{|x| x.hex}.pack('c'*32)\n    c.iv = self.username_salt = c.random_iv\n    super(c.update(val) + c.final)\n  end\n\n\n  # Sets the password using cipher to encrypt\n  #\n  # Examples\n  #\n  #   setting.password = \"foobar\"\n  #   # => true\n  #\n  # Returns true/false\n  def password=(val)\n    return false if val.blank?\n\n    @plain_password = val\n\n    c = OpenSSL::Cipher::Cipher.new(\"des3\")\n    c.encrypt\n    c.key = key = Digest::SHA1.hexdigest(SETTINGS[:direct_publishing_secret]).unpack('a2'*32).map{|x| x.hex}.pack('c'*32)\n    c.iv = self.password_salt = c.random_iv\n    super(c.update(val) + c.final)\n  end\n\n  # Return the setting data in a secure way\n  #\n  # Examples\n  #\n  #   setting.secured_output\n  #   # => { :username => \"***********\", :platform => \"wordpress_org\", :password => \"*********************\" }\n  #\n  # Returns a Hash with secured instance data\n  def secured_output\n    result = {\n      :platform => self.platform,\n      :confirmed => self.confirmed,\n      :url => self.url,\n      :direct_publishing_settings_id => self.direct_publishing_settings_id,\n      :blog_id => self.blog_id,\n      :width => self.width,\n      :valid => self.valid_setting?,\n      :available_blogs => self.available_blogs,\n      :selected_blog => self.selected_blog\n    }\n\n    if self.confirmed == \"ERROR\"\n      result.merge! :failure_code => self.failure_code, :failure_message => self.failure_message\n    end\n\n    result\n  end\n\n  def available_blogs\n    return @available_blogs_parsed if @available_blogs_parsed\n    if blogs = super\n      @available_blogs_parsed = JSON.parse(blogs, :quirks_mode => true)\n    else\n      @available_blogs_parsed = nil\n    end\n  end\n\n  def selected_blog\n    selected = super\n\n    if selected.present?\n      selected\n    elsif self.available_blogs\n      first = self.available_blogs.first ? self.available_blogs.first['blog_id'] : nil\n    else\n      nil\n    end\n  end\n\n  def valid_setting?\n    [1, true].include? self.valid\n  end\n\n  def facebook_access_token=(val)\n    @facebook_access_token = val\n  end\n\n  def self.platforms_that_requires_url\n    selected_platforms = []\n    self.platforms.each do |key, platform|\n      selected_platforms << key if platform[:url_needed] == true\n    end\n    selected_platforms\n  end\n\n  # Get a list of supported blog platforms for auto publishing\n  #\n  # Examples\n  #\n  #   DirectPublishingSetting.platforms\n  #   # => {:facebook => { :platform => \"FACEBOOK\", :c } }\n  #\n  # Returns a Hash with platforms\n  def self.platforms\n    PLATFORMS\n  end\n\n  # Get a list of supported blog platforms for auto publishing for a specific country\n  #\n  # Examples\n  #\n  #   DirectPublishingSetting.platforms_for_country(\"se\")\n  #   # => {:facebook => { :platform => \"FACEBOOK\", :c } }\n  #\n  # Returns a Hash with platforms\n  def self.platforms_for_country(country)\n    out = {}\n    self.platforms.each do |key, platform|\n      out[key] = platform if (platform[:country].nil? || platform[:country] == country)\n    end\n    out\n  end\n\n  # Sequel validate method.\n  def validate\n    # rules is a method in lib/validate.rb (included by models/mixins/user.rb)\n    # It convertes RULES-hash to Sequel validation method calls.\n    rules RULES, :platform => self.platform\n  end\n\n  def failure_code\n    begin\n      direct_publishing_jobs.last.direct_publishing_job_errors.last.failure_code\n    rescue Exception => e\n      \"PUBLISHER_UNHANDLED_ERROR\"\n    end\n  end\n\nend\n","markers":{"markers":{"1":{"id":1,"range":[[10,37],[10,37]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":675,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"2":{"id":2,"range":[[5,6],[5,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"3":{"id":3,"range":[[268,66],[268,89]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"4":{"id":4,"range":[[489,6],[489,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"5":{"id":5,"range":[[501,6],[501,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"6":{"id":6,"range":[[5,6],[5,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"7":{"id":7,"range":[[268,66],[268,89]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"8":{"id":8,"range":[[489,6],[489,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"9":{"id":9,"range":[[501,6],[501,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"10":{"id":10,"range":[[5,6],[5,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"11":{"id":11,"range":[[268,66],[268,89]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"12":{"id":12,"range":[[489,6],[489,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"13":{"id":13,"range":[[501,6],[501,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"14":{"id":14,"range":[[302,4],[302,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"15":{"id":15,"range":[[10,15],[10,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"16":{"id":16,"range":[[522,6],[522,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"17":{"id":17,"range":[[10,15],[10,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"18":{"id":18,"range":[[522,6],[522,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"19":{"id":19,"range":[[10,15],[10,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"20":{"id":20,"range":[[522,6],[522,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"21":{"id":21,"range":[[10,15],[10,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"22":{"id":22,"range":[[522,6],[522,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[451,0],[451,0]],"newRange":[[451,0],[452,0]],"oldText":"","newText":"      @available_blogs_parsed = JSON.parse(blogs)\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[452,0],[453,0]],"newRange":[[452,0],[452,0]],"oldText":"      @available_blogs_parsed = JSON.parse(blogs, :quirks_mode => true)\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[528,0],[528,0]],"newRange":[[528,0],[528,3]],"oldText":"","newText":"end","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[528,3],[529,0]],"newRange":[[528,3],[528,3]],"oldText":"end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[451,0],[451,0]],"newRange":[[451,0],[452,0]],"oldText":"","newText":"      @available_blogs_parsed = JSON.parse(blogs, :quirks_mode => true)\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[452,0],[453,0]],"newRange":[[452,0],[452,0]],"oldText":"      @available_blogs_parsed = JSON.parse(blogs)\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[528,0],[528,0]],"newRange":[[528,0],[529,0]],"oldText":"","newText":"end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[529,0],[529,3]],"newRange":[[529,0],[529,0]],"oldText":"end","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sytze/Sites/Videofy/API2/app/models/direct_publishing_setting.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"e8b9678e551b6de2291df691ff8bb169a15bc30b","deserializer":"TextBuffer"},{"text":"class DirectPublishingJob < Sequel::Model(:direct_publishing_jobs)\n  include VFM::Validate\n  plugin :validation_helpers\n\n  one_to_one  :video\n  many_to_one  :direct_publishing_setting, :key => :direct_publishing_settings_id\n  one_to_many :direct_publishing_job_errors\n\n\n  RULES = {\n  }\n\n  def self.create_one_per_setting(video_id, blog_id)\n    DirectPublishingSetting.where({:blog_id => blog_id, :confirmed => \"YES\"}).all.each do |setting|\n      DirectPublishingJob.create :direct_publishing_settings_id => setting.direct_publishing_settings_id, :video_id => video_id\n    end\n  end\n\n  def self.create_jobs_by_list(video_id, blog_id, job_list, options = {})\n    DirectPublishingSetting.\n      where({:blog_id => blog_id, :confirmed => \"YES\"}).\n      filter([[:platform, job_list]]).\n    all.each do |setting|\n      DirectPublishingJob.create :direct_publishing_settings_id => setting.direct_publishing_settings_id, :video_id => video_id, :title => options[:title], :description => options[:description]\n    end\n  end\n\n  def self.publish_forbidden_for_video?(video_id, blog_id, share_to = nil)\n    dataset = self.dataset.filter(:video_id => video_id, :state => %w(QUEUE PROCESSING DONE)).filter { created_at > (Time.now - 60*60) }.\n              join_table(:inner, :direct_publishing_settings, :direct_publishing_settings_id => :direct_publishing_settings_id).\n              filter(:direct_publishing_settings__blog_id => blog_id)\n\n    dataset = dataset.filter(:platform => share_to) if share_to\n\n    dataset.first.present?\n  end\n\n  def before_create\n    self.state ||= 'QUEUE'\n  end\n\n  def before_save\n    self.modified_at = Time.now\n    super\n  end\n\n  def report_failure(message, failure_code = \"PUBLISHER_UNHANDLED_ERROR\")\n    message = \"no message passed from publisher\" unless message\n    self.state = 'FAILED'\n    self.direct_publishing_setting.update :confirmed => \"ERROR\" unless self.video_id\n\n    self.invalidate_setting(failure_code) if self.video_id\n\n    self.add_direct_publishing_job_error :message => message, :failure_code => failure_code\n    self.save\n  end\n\n  def invalidate_setting(failure_code)\n    failure_codes_to_ignore = [\"SITE_UNREACHABLE\",\"SITE_INTERNAL_ERROR\",\"SITE_TEMPORARY_ERROR\", \"SITE_BAD_CONTENT_URL\"]\n    failure_codes_to_invalidate = DirectPublishingSetting::FAILURE_CODES.keys.select { |code| ! failure_codes_to_ignore.include? code }\n\n    self.direct_publishing_setting.update :valid => 0 if failure_codes_to_invalidate.include? failure_code\n  end\n\n  def report_success(params = {})\n    # Only save render job if the setting has been removed\n    unless self.direct_publishing_setting\n      return self.save\n    end\n\n    self.state = 'DONE'\n    unless self.video_id\n      selected_blog = self.direct_publishing_setting.selected_blog || params[:selected_blog]\n      self.direct_publishing_setting.update :confirmed => \"YES\", :available_blogs => params[:available_blogs], :xmlrpc_path => params[:xmlrpc_path], :wordpress_type => params[:wordpress_type], :selected_blog => selected_blog, :valid => 1\n    end\n\n    if params[:post_id] && self.direct_publishing_setting.platform == \"tumblr_com\"\n      UserVideoPosts.find_or_create(:video_id => self.video_id, :user_id => self.direct_publishing_setting.blog.user_id).update :tumblr_id => params[:post_id]\n    end\n\n    self.save\n  end\n\n  # Sequel validate method.\n  def validate\n    # rules is a method in lib/validate.rb (included by models/mixins/user.rb)\n    # It convertes RULES-hash to Sequel validation method calls.\n    rules RULES\n  end\n\n\nend\n","markers":{"markers":{"1":{"id":1,"range":[[53,83],[53,83]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":683,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"2":{"id":2,"range":[[53,9],[53,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"3":{"id":3,"range":[[6,15],[6,43]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"4":{"id":4,"range":[[46,6],[46,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"5":{"id":5,"range":[[46,6],[46,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"6":{"id":6,"range":[[46,6],[46,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"7":{"id":7,"range":[[46,6],[46,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"8":{"id":8,"range":[[46,6],[46,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"9":{"id":9,"range":[[46,6],[46,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"10":{"id":10,"range":[[46,6],[46,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"11":{"id":11,"range":[[46,6],[46,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"12":{"id":12,"range":[[46,6],[46,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"13":{"id":13,"range":[[46,6],[46,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"14":{"id":14,"range":[[46,6],[46,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"15":{"id":15,"range":[[46,6],[46,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"16":{"id":16,"range":[[46,6],[46,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"17":{"id":17,"range":[[46,6],[46,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"18":{"id":18,"range":[[46,6],[46,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"19":{"id":19,"range":[[46,6],[46,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sytze/Sites/Videofy/API2/app/models/direct_publishing_job.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"80fcb66ac105b63992814d19ceac60519c631bc8","deserializer":"TextBuffer"},{"text":"Api.controller '/direct_publishing_jobs', :provides => [:json, :marshal, :oj] do\n \n  get '/blogs/:blog_id' do\n    # TODO: Enable by_params for this method\n    blog_id = blog_id.first if blog_id.is_a? Array\n    job = DirectPublishingJobs.by_blog_id(params[:blog_id])\n \n    if job.nil?\n      status 404\n      resultify({\n        :status => \"FAILED\",\n        :error => {\n          :type => \"NOT_FOUND\",\n          :message => \"Job was not found\"\n        }\n      })\n    else\n      resultify({\n        :data => {\n          :job_id => job[:direct_publishing_job_id],\n          :state  => job[:state],\n          :age    => (Time.now - job[:modified_at]).to_i\n      }})\n    end\n  end\n \n  # Get by params\n  get '/fetch_first' do\n    job = DirectPublishingJobs.first_in_queue\n    if job\n      resultify(job)\n    else\n      status 404\n      resultify({\n        :status => \"FAILED\",\n        :error => {\n          :type => \"NOT_FOUND\",\n          :message => \"No new jobs in queue\"\n        }\n      })\n    end\n  end\n \n  post '/notify/:job_id' do\n    job_id = params[:job_id].is_a?(Array) ? params[:job_id].first : params[:job_id]\n    job = DirectPublishingJob.where(:direct_publishing_job_id => job_id.to_i).first\n \n    (status 404; return resultify({\n      :status => \"NOT_FOUND\"\n    })) unless job\n \n    if params['result'] == 'success'\n      job.report_success :post_id => params[:post_id], :available_blogs => params[:available_blogs], :xmlrpc_path => params[:xmlrpc_path], :wordpress_type => params[:wordpress_type], :selected_blog => params[:selected_blog]\n    else\n      job.report_failure params['message'], params['failure_code']\n    end\n \n    if job.save\n      status 200\n      resultify({\n        :status => \"SUCCESS\"\n      })\n    else\n      status 500\n      resultify({\n        :status => \"FAILED\",\n        :error => {\n          :type => \"UNKNOWN_ERROR\",\n          :message => \"Saving failed due to unknown error\"\n        }\n      })\n    end\n  end\n \n  get '/:job_id' do\n \n    # TODO: Enable by_params for this method\n    job_id = params[:job_id].first if params[:job_id].is_a? Array\n    job = DirectPublishingJob.where(:direct_publishing_job_id => job_id.to_i).first\n \n \n    if job.nil?\n      status 404\n      resultify({\n        :status => \"FAILED\",\n        :error => {\n          :type => \"NOT_FOUND\",\n          :message => \"Job was not found\"\n        }\n      })\n    else\n      resultify({\n        :data => {\n          :job_id => job_id,\n          :state  => job[:state],\n          :age    => (Time.now - job[:modified_at]).to_i\n      }})\n    end\n  end\nend","markers":{"markers":{"1":{"id":1,"range":[[29,10],[29,10]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":691,"autoscroll":true,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"2":{"id":2,"range":[[54,10],[54,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"3":{"id":3,"range":[[54,10],[54,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"4":{"id":4,"range":[[54,10],[54,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sytze/Sites/Videofy/API2/app/controllers/direct_publishing_jobs.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"6a73b603920efc15423034777a6b454556eb7752","deserializer":"TextBuffer"},{"text":"module DirectPublishingJobs\n  extend self\n\n  def by_blog_id(blog_id)\n    # IMPORANT SECURITY REMINDER! Do not let this query select sensitive information from settings table\n    DB[\"\n      SELECT direct_publishing_job_id, enable_xmlrpc, direct_publishing_settings_id, blog_id, video_id, state, modified_at, created_at\n      FROM\n        direct_publishing_jobs INNER JOIN\n        direct_publishing_settings USING (direct_publishing_settings_id)\n      WHERE\n        blog_id = :blog_id\n      ORDER BY created_at DESC\n      LIMIT 1\n      \", {:blog_id => blog_id}].first\n  end\n\n  def first_in_queue\n    job = nil\n    DB.transaction do\n      job = DB[\"\n        SELECT job_id, enable_xmlrpc, username, password, username_salt, password_salt, blog_uri, blog_name, video_title, video_description, selected_blog, wordpress_type,\n               video_height, video_width, video_id, video_filename, video_format, custom_title, custom_description, embed_width, facebook_access_token, thumbnail_filename, oauth, fb_permissions, tagged_facebook_users\n        FROM (\n          SELECT direct_publishing_job_id AS job_id, enable_xmlrpc, username, password, username_salt, password_salt, direct_publishing_settings.url AS blog_uri, wordpress_type,\n                 platform AS blog_name, '' AS video_title, '' AS video_description, 0 AS video_height, 0 AS video_width, direct_publishing_settings.selected_blog,\n                 NULL AS video_id, '' AS video_filename, '' AS video_format, NULL AS custom_title, NULL AS custom_description, direct_publishing_settings.width AS embed_width, ufat.access_token AS facebook_access_token,\n                 '' AS thumbnail_filename, oauth, ufat.permissions AS fb_permissions, '' AS tagged_facebook_users\n          FROM direct_publishing_jobs apj\n          INNER JOIN direct_publishing_settings USING(direct_publishing_settings_id)\n          INNER JOIN blogs USING(blog_id)\n          LEFT JOIN user_facebook_access_tokens ufat ON blogs.user_id = ufat.user_id\n          LEFT JOIN facebook_timeline ft ON blogs.user_id = ft.user_id\n          WHERE apj.state = 'QUEUE'\n          AND apj.video_id IS NULL\n          AND direct_publishing_settings.confirmed = 'PENDING'\n          ORDER BY apj.created_at) as checks\n        LIMIT 1\n        UNION\n        SELECT job_id, enable_xmlrpc, username, password, username_salt, password_salt, blog_uri, blog_name, video_title, video_description, selected_blog, wordpress_type,\n               video_height, video_width, video_id, video_filename, video_format, custom_title, custom_description, embed_width, facebook_access_token, thumbnail_filename, oauth, fb_permissions, tagged_facebook_users\n        FROM (\n          SELECT direct_publishing_job_id AS job_id, enable_xmlrpc, username, password, username_salt, password_salt, direct_publishing_settings.url AS blog_uri, wordpress_type,\n                 platform AS blog_name, videos.title AS video_title, videos.description AS video_description, height AS video_height, videos.width AS video_width, videos.video_id AS video_id, direct_publishing_settings.selected_blog,\n                 videos.file_name AS video_filename, videos.format AS video_format, videos.tagged_facebook_users AS tagged_facebook_users, apj.title AS custom_title, apj.description AS custom_description, direct_publishing_settings.width AS embed_width, ufat.access_token AS facebook_access_token,\n                 video_thumbnails.thumbnail_filename, oauth, ufat.permissions AS fb_permissions\n          FROM direct_publishing_jobs apj\n          INNER JOIN videos USING(video_id)\n          INNER JOIN blogs USING(blog_id)\n          INNER JOIN direct_publishing_settings USING(direct_publishing_settings_id)\n          INNER JOIN render_jobs rj using (video_id)\n          LEFT JOIN video_thumbnails using(thumbnail_id)\n          LEFT JOIN user_facebook_access_tokens ufat ON blogs.user_id = ufat.user_id\n          WHERE apj.state = 'QUEUE'\n          AND rj.event = 'FINISHING'\n          AND rj.state = 'DONE'\n          AND direct_publishing_settings.confirmed = 'YES'\n          ORDER BY apj.created_at) as jobs\n        LIMIT 1\n      \"].first\n\n      return nil unless job\n\n      return nil unless update_to_processing(job[:job_id])\n    end\n\n    job[:tags] = DirectPublishingJobs.tags(job[:video_id]) unless job[:video_id].nil?\n    job[:embed_code] = DirectPublishingJobs.embed_code(job) unless job[:video_id].nil?\n    job[:thumbnail] = DirectPublishingJobs.thumbnail(job) unless job[:video_id].nil?\n\n    job[:fb_permissions] = job[:fb_permissions].try(:split, \",\")\n\n    job[:title] = job[:custom_title] || job[:video_title]\n    job[:description] = job[:custom_description] || job[:video_description]\n\n    job[:tags] ||= nil\n    job[:embed_code] ||= nil\n\n    return job\n  end\n\n  def update_to_processing(job_id)\n    affected = DB['UPDATE direct_publishing_jobs SET state = \"PROCESSING\", modified_at = NOW() WHERE state = \"QUEUE\" AND direct_publishing_job_id = :job_id', {:job_id => job_id}].update\n\n    if affected != 1\n      logger.error(\"Job was stolen, lucky that the direct publisher is thread persistent!\")\n      return false\n    else\n      return true\n    end\n  end\n\n  def embed_code(job)\n    embed = IFRAME_EMBED_CODE #EMBED_CODE_CLEAN\n    embed = WORDPRESS_VFM_PLUGIN_EMBED_CODE if job[:wordpress_type] == 'wordpress_vfm_plugin'\n    embed = GIGYA_EMBED_CODE if job[:wordpress_type] == 'wordpress_com'\n\n    embed_width = (job[:embed_width].present? && job[:embed_width] > 0) ? job[:embed_width] : 480\n    height    = (job[:video_height].present? && job[:video_height] > 0) ? job[:video_height] : 360\n    width     = (job[:video_width].present? && job[:video_width] > 0) ? job[:video_width] : 480\n    video_id  = job[:video_id]\n\n    if height && width\n      ratio = height.to_f/width.to_f\n      height = (ratio*embed_width).to_i\n      width = embed_width\n      height = embed_width*0.75 if height > embed_width*0.75\n      height = 240 if height < 240\n    else\n      width = embed_width\n      height = embed_width*0.75\n    end\n\n    embed = embed.gsub(/%VIDEOID%/, video_id.to_s)\n    embed = embed.gsub(/%HEIGHT%/, height.to_i.to_s)\n    embed = embed.gsub(/%WIDTH%/, width.to_i.to_s)\n\n    embed\n  end\n\n  def thumbnail(job)\n    \"#{THUMBNAIL_PATH}#{job[:thumbnail_filename]}\"\n  end\n\n  def tags(video_id)\n    tags = []\n\n    DB[\"\n      SELECT name FROM tags_videos\n      INNER JOIN tags USING(tag_id)\n      WHERE video_id = :video_id\", {:video_id => video_id}].each do |r|\n      tags << r[:name]\n    end\n\n    tags\n  end\n\n  def by_params(params)\n    param_map = {\n      :job_id      => :direct_publishing_job_id,\n      :state       => :state,\n      :modified_at => :modified_at\n    }\n\n    return DB[:direct_publishing_jobs].select {param_map.values}.\n                      limit(20).\n                      query_by_params(params, param_map)\n  end\n\n\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":695,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sytze/Sites/Videofy/API2/lib/direct_publishing_jobs.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"8d03752a6013e04d3ce0262206eba83dda9bcead","deserializer":"TextBuffer"},{"text":"source 'http://gemcutter.org'\nsource 'http://videofyme:medeltid@gems.videofy.me'\n\n# Project requirements\ngem 'rake'\ngem \"activesupport\", \"3.2.12\", :require => 'active_support/all'\n\n# Database requirements\ngem 'sequel'\ngem 'mysql2', \"0.3.11\"\n\n# Serialize requirements\ngem 'json'\ngem 'oj'\n\n# Padrino\ngem 'padrino'\n\n# HTML entities\ngem 'htmlentities'\n\n# Templating\ngem 'erubis'\n\n# Translation\ngem \"fast_gettext\"\ngem \"gettext\", :require => false #only used for mo/po file generation in development, !do not load(:lib=>false)! since it will only eat 7mb ram\n\n# Redis\ngem 'redis'\ngem 'hiredis'\ngem 'redis-store', '>=1.0.0.beta3'\ngem 'redis_master_slave'\ngem 'SystemTimer'\n\ngroup :development, :test do\n  gem 'capistrano'\n  gem 'capistrano-ext'\n  gem 'capistrano_colors'\n  gem 'pry'\n  gem 'vfm_cap_tasks', :require => false\nend\n\ngroup :development do\n  gem 'foreman'\n  gem 'thin'\nend\n\ngroup :production do\n  gem 'unicorn', '~> 4.6.2'\nend\n\ngroup :test do\n  gem 'spork', '~> 1.0.rc'\n  gem 'rr'\n  gem 'rspec'\n  gem 'rack-test', :require => \"rack/test\"\n  gem 'resque_spec'\nend\n\n# Error reporting\ngem 'airbrake'\n\n# C2DM (Android push)\ngem 'c2dm', '0.2.1' # \"3.0.0\" does not support ruby 1.8.7\n\n# JustinTV APNS (iPhone push)\ngem 'jtv-apns', :require => \"apns\"\n\n# Resque\ngem 'resque'\ngem 'resque-pause'\ngem 'resque-scheduler', :require => 'resque_scheduler'\ngem 'resque-loner'\ngem 'resque-retry'\ngem 'resque-cleaner'\n\n# Component requirements\ngem 'faraday'\n\n# Elastic search\ngem 'tire', \"0.5.8\"\n\n# New relic\ngem 'vfm_padrino-rpm', '0.6.8', :require => \"padrino-rpm\"\ngem \"newrelic-sequel\"\n\n# Mail\n#gem 'actionmailer'\ngem 'aws-sdk'\n\ngem 'twitter_oauth', \"0.4.94\"\n\ngem 'geoip'\n\ngem 'mail'\n\ngem 'gcm'\n\ngem 'curb'\n\ngem 'dogstatsd-ruby', :require => \"statsd\"\n\ngem 'http_router', '0.11.0', :tag => 'v0.11.0', :git => 'git://github.com/joshbuddy/http_router.git'\n","markers":{"markers":{"1":{"id":1,"range":[[19,18],[19,18]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":947,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[5,0],[5,0]],"newRange":[[5,0],[6,0]],"oldText":"","newText":"gem 'thin'\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[46,0],[47,0]],"newRange":[[46,0],[46,0]],"oldText":"  gem 'thin'\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[48,0],[52,0]],"newRange":[[48,0],[48,0]],"oldText":"group :production do\n  gem 'unicorn', '~> 4.6.2'\nend\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,0],[6,0]],"newRange":[[5,0],[5,0]],"oldText":"gem 'thin'\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[45,0],[45,0]],"newRange":[[45,0],[46,0]],"oldText":"","newText":"  gem 'thin'\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[48,0],[48,0]],"newRange":[[48,0],[52,0]],"oldText":"","newText":"group :production do\n  gem 'unicorn', '~> 4.6.2'\nend\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sytze/Sites/Videofy/API2/Gemfile","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"c2b2a5e03c649ffb1a221d2ffd1920b3ad71fc88","deserializer":"TextBuffer"},{"text":"Api.controller :featured_user_categories, :provides => [:json, :marshal, :oj] do\n  get '/' do\n    resultify :data => FeaturedUserCategory.dataset.order_by(:placement).all_representated(:country => params[:country_eq], :requester_id => params[:requester_id])\n  end\n\n  get '/categories' do\n    data = DB[:featured_user_categories].order(:placement).all\n\n    resultify :data => data\n  end\n\n  get '/:identifier' do\n    resultify :data => FeaturedUserCategory.by_identifier(params[:identifier]).representation(:country => params[:country_eq], :requester_id => params[:requester_id])\n  end\n\n  get '/:identifier/bloggers' do\n    category  = FeaturedUserCategory.by_identifier(params[:identifier])\n    not_found unless category\n    data = category.bloggers_dataset_by_country(params[:country_eq]).all_follow_representated(params[:requester_id])\n    resultify :data => data\n  end\n\n  get '/:identifier/users_by_country' do\n    category = FeaturedUserCategory.by_identifier params[:identifier]\n    not_found unless category\n    data = category.users_by_category_and_country(params[:country_eq]).all_follow_representated(params[:requester_id])\n    resultify :data => data\n  end\n\n  delete '/featured_user' do\n    if FeaturedUserCategory.remove_featured_user params[\"category_id\"], params[\"user_id\"], params[\"country_eq\"]\n      resultify :status => \"SUCCESS\"\n    else\n      resultify :status => \"FAILED\"\n    end\n  end\n\n  delete '/category_and_users' do\n    if FeaturedUserCategory.remove_category_and_users params[:id]\n      resultify :status => \"SUCCESS\"\n    else\n      resultify :status => \"FAILED\"\n    end\n  end\n\n  post '/featured_user' do\n    if FeaturedUserCategory.add_featured_user params[\"id\"], params[\"user_id\"], params[\"country_eq\"]\n      resultify :status => \"SUCCESS\"\n    else\n      resultify :status => \"FAILED\"\n    end\n  end\n\n  post '/' do\n    category = FeaturedUserCategory.new :name => params[:name], :identifier => params[:identifier], :placement => params[:placement]\n\n    if category.save\n      status 201\n      resultify :status => \"SUCCESS\"\n    else\n      resultify :status => \"FAILED\"\n    end\n  end\n\n  put '/category_placements' do\n    if FeaturedUserCategory.update_category_placements(params)\n      resultify :status => \"SUCCESS\"\n    else\n      resultify :status => \"FAILED\"\n    end\n  end\n\n  put '/user_placements' do\n    if FeaturedUserCategory.update_user_placements(params[\"category_id\"], params[\"user_ids\"], params[\"country_eq\"])\n      resultify :status => \"SUCCESS\"\n    else\n      resultify :status => \"FAILED\"\n    end\n  end\nend","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":1207},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sytze/Sites/Videofy/API2/app/controllers/featured_user_categories.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"7a9af89f9a2932f56585fd531187c59934893108","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"children":[{"items":[{"id":675,"softTabs":true,"displayBuffer":{"id":676,"softWrap":false,"editorWidthInChars":194,"scrollTop":4042,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sytze/Sites/Videofy/API2/app/models/direct_publishing_setting.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":691,"softTabs":true,"displayBuffer":{"id":692,"softWrap":false,"editorWidthInChars":190,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sytze/Sites/Videofy/API2/app/controllers/direct_publishing_jobs.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":947,"softTabs":true,"displayBuffer":{"id":948,"softWrap":false,"editorWidthInChars":190,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sytze/Sites/Videofy/API2/Gemfile","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":1207,"softTabs":true,"displayBuffer":{"id":1208,"softWrap":false,"editorWidthInChars":194,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sytze/Sites/Videofy/API2/app/controllers/featured_user_categories.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/sytze/Sites/Videofy/API2/Gemfile","focused":true,"active":true,"deserializer":"Pane"},{"items":[{"id":671,"softTabs":true,"displayBuffer":{"id":670,"softWrap":false,"editorWidthInChars":194,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sytze/Sites/Videofy/API2/app/controllers/direct_publishing_settings.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":683,"softTabs":true,"displayBuffer":{"id":684,"softWrap":false,"editorWidthInChars":194,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sytze/Sites/Videofy/API2/app/models/direct_publishing_job.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":695,"softTabs":true,"displayBuffer":{"id":696,"softWrap":false,"editorWidthInChars":190,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sytze/Sites/Videofy/API2/lib/direct_publishing_jobs.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/sytze/Sites/Videofy/API2/lib/direct_publishing_jobs.rb","focused":false,"active":false,"deserializer":"Pane"}],"orientation":"horizontal","deserializer":"PaneAxis"},"deserializer":"PaneContainer"},"fullScreen":true,"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/sytze/Sites/Videofy/API2/app/models/direct_publishing_setting.rb":1402471105146,"/Users/sytze/Sites/Videofy/API2/app/controllers/direct_publishing_jobs.rb":1402499131320,"/Users/sytze/Sites/Videofy/API2/Gemfile":1402641746837,"/Users/sytze/Sites/Videofy/API2/app/controllers/featured_user_categories.rb":1402641583330,"/Users/sytze/Sites/Videofy/API2/app/controllers/direct_publishing_settings.rb":1402471097957,"/Users/sytze/Sites/Videofy/API2/app/models/direct_publishing_job.rb":1402472298509,"/Users/sytze/Sites/Videofy/API2/lib/direct_publishing_jobs.rb":1402641537636},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":1896109},"tree-view":{"directoryExpansionStates":{"app":{"controllers":{},"models":{},"representations":{},"views":{}},"lib":{"tasks":{}}},"selectedPath":"/Users/sytze/Sites/Videofy/API2/Gemfile","hasFocus":false,"attached":true,"scrollLeft":6,"scrollTop":0,"width":200},"find-and-replace":{"viewState":{"findHistory":["send_new_video_notifications","scan_user","meta","try_facebook_timeline_create_event","facebook_auth","facebook_authenticate","facebook_auth","get '/user","get '/:user_id"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}},"projectViewState":{"findHistory":["public","HandleDelayedBloggerAfterSave","me","puts","featured_user_categories","profile_picture","report_failure"],"replaceHistory":[],"pathsHistory":["app/controllers","app","app/controllers"],"modelState":{"useRegex":false,"caseSensitive":false}},"resultsModelState":{"useRegex":false,"caseSensitive":false}}}}